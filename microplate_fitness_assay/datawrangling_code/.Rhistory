names_to = "Well", values_to = "Strain"))
inf.long <- as.data.frame(pivot_longer(infection, cols = everything(),
names_to = "Well", values_to = "Infection"))
OD.long <- data %>%
pivot_longer(cols = -Time, names_to="Well", values_to="OD600")
#combine
OD.long$Media<-rep(med.long$Media, length.out=55392)
OD.long$Strain<-rep(stn.long$Strain, length.out=55392)
OD.long$Infection<-rep(inf.long$Infection, length.out=55392)
#filter out "Blanks"
summary<-OD.long[!apply(OD.long, 1, function(row) any(row=="Blank")), ]
str(OD.long)
#For LB
#Filter for LB media and Ctrl infection
filter.LB<- OD.long %>%
filter(Media == "LB", Infection == "Ctrl") %>%
select(Time, OD600, Strain)
#Summarize OD600 for each strain across all time points
fitness.sum.LB <- filter.LB %>%
group_by(Strain) %>%
summarize(Fitness = sum(OD600, na.rm = TRUE))  # Summing OD600 as a proxy for fitness
# Define the custom order
custom_order <- c("WT", "SPOIIE", "sigF", "sigG")
# Convert Strain to a factor with this order
fitness.sum.LB$Strain <- factor(fitness.sum.LB$Strain, levels = custom_order)
# Plot
ggplot(fitness.sum.LB, aes(x = Strain, y = Fitness, fill = Strain)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Strain Fitness in LB Media (Ctrl)",
x = "Strain",
y = "Fitness (Sum of OD600)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#For DSM
#Filter for LB media and Ctrl infection
filter.DSM<- OD.long %>%
filter(Media == "DSM", Infection == "Ctrl") %>%
select(Time, OD600, Strain)
#Summarize OD600 for each strain across all time points
fitness.sum.DSM <- filter.DSM %>%
group_by(Strain) %>%
summarize(Fitness = sum(OD600, na.rm = TRUE))  # Summing OD600 as a proxy for fitness
# Convert Strain to a factor with this order
fitness.sum.DSM$Strain <- factor(fitness.sum.DSM$Strain, levels = custom_order)
# Plot
ggplot(fitness.sum.DSM, aes(x = Strain, y = Fitness, fill = Strain)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Strain Fitness in DSM Media (Ctrl)",
x = "Strain",
y = "Fitness (Sum of OD600)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Get unique strains
strains <- unique(OD.long$Strain)
# Initialize list to store matrices
strain_matrices <- list()
# Loop through each strain
for (strain in strains) {
# Filter for the current strain and LB media
strain_data <- OD.long %>%
filter(Media == "LB", Strain == strain) %>%
select(Time, Infection, OD600) %>%
mutate(OD600 = as.numeric(OD600))  # Ensure OD600 is numeric
# Reshape data: Time as rows, Infection as columns (handling duplicates)
strain_matrix <- strain_data %>%
tidyr::pivot_wider(names_from = Infection, values_from = OD600, values_fn = mean)
# Convert to numeric matrix (remove Time column)
strain_matrix <- as.matrix(strain_matrix[, -1, drop = FALSE])  # Drop Time column
mode(strain_matrix) <- "numeric"  # Ensure numeric
# Store matrix in list
strain_matrices[[strain]] <- strain_matrix
}
# Compute fitness by summing OD600 for each infection condition
fitness_values <- lapply(strain_matrices, function(mat) {
colSums(mat, na.rm = TRUE)  # Sum numeric values
})
# Convert to data frame for easier analysis
fitness_df <- do.call(rbind, fitness_values)
rownames(fitness_df) <- names(fitness_values)
fitness_df_adj <- fitness_df  # Create a copy to store adjusted values
fitness_df_adj <- sweep(fitness_df, 1, fitness_df[, 3], FUN = "-")
# Initialize list to store matrices
strain_matrices.d <- list()
# Loop through each strain
for (strain in strains) {
# Filter for the current strain and LB media
strain_data.d <- OD.long %>%
filter(Media == "LB", Strain == strain) %>%
select(Time, Infection, OD600) %>%
mutate(OD600 = as.numeric(OD600))  # Ensure OD600 is numeric
# Reshape data: Time as rows, Infection as columns (handling duplicates)
strain_matrix.d <- strain_data.d %>%
tidyr::pivot_wider(names_from = Infection, values_from = OD600, values_fn = mean)
# Convert to numeric matrix (remove Time column)
strain_matrix.d <- as.matrix(strain_matrix.d[, -1, drop = FALSE])  # Drop Time column
mode(strain_matrix.d) <- "numeric"  # Ensure numeric
# Store matrix in list
strain_matrices.d[[strain]] <- strain_matrix.d
}
# Compute fitness by summing OD600 for each infection condition
fitness_values.d <- lapply(strain_matrices.d, function(mat.d) {
colSums(mat.d, na.rm = TRUE)  # Sum numeric values
})
# Convert to data frame for easier analysis
fitness_df.d <- do.call(rbind, fitness_values.d)
rownames(fitness_df.d) <- names(fitness_values.d)
# Adjusted fitness values (subtract third column from all other columns)
fitness_df_adj.d <- fitness_df.d  # Create a copy to store adjusted values
fitness_df_adj.d <- sweep(fitness_df.d, 1, fitness_df.d[, 3], FUN = "-")
# Output results
fitness_df_adj.d
# Convert row names into a proper column (Strain) before merging
fitness.LB <- fitness_df_adj %>%
as.data.frame() %>%
tibble::rownames_to_column(var = "Strain")
fitness.DSM <- fitness_df_adj.d %>%
as.data.frame() %>%
tibble::rownames_to_column(var = "Strain")
# Add Media column
fitness.LB$Media <- "LB"
fitness.DSM$Media <- "DSM"
# Combine datasets properly
fitness_combined <- bind_rows(fitness.LB, fitness.DSM)  # bind_rows() prevents row name issues
# Convert row names to a column (Strain)
fitness_combined <- tibble::rownames_to_column(fitness_combined, var = "Strain")
View(fitness_combined)
# Convert row names to a column (Strain)
fitness_combined$Strain <- as.factor(fitness_combined$Strain)
# Ensure Media, Strain, and Infection are factors
fitness_combined$Media <- as.factor(fitness_combined$Media)
fitness_combined$Strain <- as.factor(fitness_combined$Strain)
# Convert to long format while keeping Media
fitness_long <- fitness_combined %>%
pivot_longer(cols = -c(Strain, Media), names_to = "Infection", values_to = "Fitness")
# Ensure Infection is a factor
fitness_long$Infection <- as.factor(fitness_long$Infection)
#remove ctrl
fitness_long<-fitness_long[!apply(fitness_long, 1, function(row) any(row=="Ctrl")), ]
# Run 3-way ANOVA model with Media included
anova_model <- aov(Fitness ~ Strain * Infection * Media, data = fitness_long)
# Display ANOVA results
summary(anova_model)
View(fitness_long)
View(fitness_df_adj)
View(fitness_df_adj.d)
rm(list = ls())
#make sure to open under project w/in dataWrangling_code
#install.packages("vegan")
#install.packages("tidyverse")
require("png")
require("dplyr")
library("tidyverse")
require("grid")
require("tibble")
require("knitr")
require("extrafont")
require("ggrepel");
require("gridExtra")
require("contrast")
require("vegan")
sem <- function(x) sqrt(var(x)/length(x))
cv <- function(x) (sd(x)/mean(x))*100
#load data
data<-read.csv("../data/20250228OD600.csv")
design<-read.csv("../reference/20250228OD600Design.csv", header=FALSE)
#subset design file, "wells" will be strain plus treatment but I can update design file to include a separate column for both
media<-design[1:8,1:12]
strain<-design[9:16,1:12]
infection<-design[17:24, 1:12]
# Create custom labels
rows <- LETTERS[1:8]  # A to H
cols <- 1:12  # 1 to 12
custom_labels <- unlist(lapply(rows, function(row) paste0(row, cols)))
#convert to long
med.long <- as.data.frame(pivot_longer(media, cols = everything(),
names_to = "Well", values_to = "Media"))
stn.long <- as.data.frame(pivot_longer(strain, cols = everything(),
names_to = "Well", values_to = "Strain"))
inf.long <- as.data.frame(pivot_longer(infection, cols = everything(),
names_to = "Well", values_to = "Infection"))
OD.long <- data %>%
pivot_longer(cols = -Time, names_to="Well", values_to="OD600")
#combine
OD.long$Media<-rep(med.long$Media, length.out=55392)
OD.long$Strain<-rep(stn.long$Strain, length.out=55392)
OD.long$Infection<-rep(inf.long$Infection, length.out=55392)
#filter out "Blanks"
summary<-OD.long[!apply(OD.long, 1, function(row) any(row=="Blank")), ]
str(OD.long)
#For LB
#Filter for LB media and Ctrl infection
filter.LB<- OD.long %>%
filter(Media == "LB", Infection == "Ctrl") %>%
select(Time, OD600, Strain)
#Summarize OD600 for each strain across all time points
fitness.sum.LB <- filter.LB %>%
group_by(Strain) %>%
summarize(Fitness = sum(OD600, na.rm = TRUE))  # Summing OD600 as a proxy for fitness
# Define the custom order
custom_order <- c("WT", "SPOIIE", "sigF", "sigG")
# Convert Strain to a factor with this order
fitness.sum.LB$Strain <- factor(fitness.sum.LB$Strain, levels = custom_order)
# Plot
ggplot(fitness.sum.LB, aes(x = Strain, y = Fitness, fill = Strain)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Strain Fitness in LB Media (Ctrl)",
x = "Strain",
y = "Fitness (Sum of OD600)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#For DSM
#Filter for LB media and Ctrl infection
filter.DSM<- OD.long %>%
filter(Media == "DSM", Infection == "Ctrl") %>%
select(Time, OD600, Strain)
#Summarize OD600 for each strain across all time points
fitness.sum.DSM <- filter.DSM %>%
group_by(Strain) %>%
summarize(Fitness = sum(OD600, na.rm = TRUE))  # Summing OD600 as a proxy for fitness
# Convert Strain to a factor with this order
fitness.sum.DSM$Strain <- factor(fitness.sum.DSM$Strain, levels = custom_order)
# Plot
ggplot(fitness.sum.DSM, aes(x = Strain, y = Fitness, fill = Strain)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Strain Fitness in DSM Media (Ctrl)",
x = "Strain",
y = "Fitness (Sum of OD600)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Get unique strains
strains <- unique(OD.long$Strain)
# Initialize list to store matrices
strain_matrices <- list()
# Loop through each strain
for (strain in strains) {
# Filter for the current strain and LB media
strain_data <- OD.long %>%
filter(Media == "LB", Strain == strain) %>%
select(Time, Infection, OD600) %>%
mutate(OD600 = as.numeric(OD600))  # Ensure OD600 is numeric
# Reshape data: Time as rows, Infection as columns (handling duplicates)
strain_matrix <- strain_data %>%
tidyr::pivot_wider(names_from = Infection, values_from = OD600, values_fn = mean)
# Convert to numeric matrix (remove Time column)
strain_matrix <- as.matrix(strain_matrix[, -1, drop = FALSE])  # Drop Time column
mode(strain_matrix) <- "numeric"  # Ensure numeric
# Store matrix in list
strain_matrices[[strain]] <- strain_matrix
}
# Compute fitness by summing OD600 for each infection condition
fitness_values <- lapply(strain_matrices, function(mat) {
colSums(mat, na.rm = TRUE)  # Sum numeric values
})
# Convert to data frame for easier analysis
fitness_df <- do.call(rbind, fitness_values)
rownames(fitness_df) <- names(fitness_values)
fitness_df_adj <- fitness_df  # Create a copy to store adjusted values
fitness_df_adj <- sweep(fitness_df, 1, fitness_df[, 3], FUN = "-")
# Initialize list to store matrices
strain_matrices.d <- list()
# Loop through each strain
for (strain in strains) {
# Filter for the current strain and LB media
strain_data.d <- OD.long %>%
filter(Media == "DSM", Strain == strain) %>%
select(Time, Infection, OD600) %>%
mutate(OD600 = as.numeric(OD600))  # Ensure OD600 is numeric
# Reshape data: Time as rows, Infection as columns (handling duplicates)
strain_matrix.d <- strain_data.d %>%
tidyr::pivot_wider(names_from = Infection, values_from = OD600, values_fn = mean)
# Convert to numeric matrix (remove Time column)
strain_matrix.d <- as.matrix(strain_matrix.d[, -1, drop = FALSE])  # Drop Time column
mode(strain_matrix.d) <- "numeric"  # Ensure numeric
# Store matrix in list
strain_matrices.d[[strain]] <- strain_matrix.d
}
# Compute fitness by summing OD600 for each infection condition
fitness_values.d <- lapply(strain_matrices.d, function(mat.d) {
colSums(mat.d, na.rm = TRUE)  # Sum numeric values
})
# Convert to data frame for easier analysis
fitness_df.d <- do.call(rbind, fitness_values.d)
rownames(fitness_df.d) <- names(fitness_values.d)
# Adjusted fitness values (subtract third column from all other columns)
fitness_df_adj.d <- fitness_df.d  # Create a copy to store adjusted values
fitness_df_adj.d <- sweep(fitness_df.d, 1, fitness_df.d[, 3], FUN = "-")
# Output results
fitness_df_adj.d
# Convert row names into a proper column (Strain) before merging
fitness.LB <- fitness_df_adj %>%
as.data.frame() %>%
tibble::rownames_to_column(var = "Strain")
fitness.DSM <- fitness_df_adj.d %>%
as.data.frame() %>%
tibble::rownames_to_column(var = "Strain")
# Add Media column
fitness.LB$Media <- "LB"
fitness.DSM$Media <- "DSM"
# Combine datasets properly
fitness_combined <- bind_rows(fitness.LB, fitness.DSM)  # bind_rows() prevents row name issues
# Convert row names to a column (Strain)
fitness_combined$Strain <- as.factor(fitness_combined$Strain)
# Ensure Media, Strain, and Infection are factors
fitness_combined$Media <- as.factor(fitness_combined$Media)
fitness_combined$Strain <- as.factor(fitness_combined$Strain)
# Convert to long format while keeping Media
fitness_long <- fitness_combined %>%
pivot_longer(cols = -c(Strain, Media), names_to = "Infection", values_to = "Fitness")
# Ensure Infection is a factor
fitness_long$Infection <- as.factor(fitness_long$Infection)
#remove ctrl
fitness_long<-fitness_long[!apply(fitness_long, 1, function(row) any(row=="Ctrl")), ]
# Run 3-way ANOVA model with Media included
anova_model <- aov(Fitness ~ Strain * Infection * Media, data = fitness_long)
# Display ANOVA results
summary(anova_model)
lm_model <- lm(Fitness ~ Strain * Infection * Media, data = fitness_long)
summary(lm_model)  # Check p-values for Media
# Display ANOVA results
summary(anova_model)
summary(anova_model_fixed)
# Display ANOVA results
summary(anova_model)
summary(anova_model_fixed)
summary(anova_model)
# Display ANOVA results
summary.aov(anova_model)
install.packages("car")  # If not already installed
library(car)
Anova(anova_model_fixed, type = 2)  # Type II ANOVA
Anova(anova_model, type = 2)  # Type II ANOVA
Anova(anova_model, type = 3)  # Type III ANOVA (requires contrasts)
View(fitness_long)
rm(list = ls())
#make sure to open under project w/in dataWrangling_code
#install.packages("vegan")
#install.packages("tidyverse")
require("png")
require("dplyr")
library("tidyverse")
require("grid")
require("tibble")
require("knitr")
require("extrafont")
require("ggrepel");
require("gridExtra")
require("contrast")
require("vegan")
sem <- function(x) sqrt(var(x)/length(x))
cv <- function(x) (sd(x)/mean(x))*100
#load data
data<-read.csv("../data/20250228OD600.csv")
design<-read.csv("../reference/20250228OD600Design.csv", header=FALSE)
#subset design file, "wells" will be strain plus treatment but I can update design file to include a separate column for both
media<-design[1:8,1:12]
strain<-design[9:16,1:12]
infection<-design[17:24, 1:12]
# Create custom labels
rows <- LETTERS[1:8]  # A to H
cols <- 1:12  # 1 to 12
custom_labels <- unlist(lapply(rows, function(row) paste0(row, cols)))
#convert to long
med.long <- as.data.frame(pivot_longer(media, cols = everything(),
names_to = "Well", values_to = "Media"))
stn.long <- as.data.frame(pivot_longer(strain, cols = everything(),
names_to = "Well", values_to = "Strain"))
inf.long <- as.data.frame(pivot_longer(infection, cols = everything(),
names_to = "Well", values_to = "Infection"))
OD.long <- data %>%
pivot_longer(cols = -Time, names_to="Well", values_to="OD600")
#combine
OD.long$Media<-rep(med.long$Media, length.out=55392)
OD.long$Strain<-rep(stn.long$Strain, length.out=55392)
OD.long$Infection<-rep(inf.long$Infection, length.out=55392)
#filter out "Blanks"
summary<-OD.long[!apply(OD.long, 1, function(row) any(row=="Blank")), ]
str(OD.long)
#For LB
#Filter for LB media and Ctrl infection
filter.LB<- OD.long %>%
filter(Media == "LB", Infection == "Ctrl") %>%
select(Time, OD600, Strain)
#Summarize OD600 for each strain across all time points
fitness.sum.LB <- filter.LB %>%
group_by(Strain) %>%
summarize(Fitness = sum(OD600, na.rm = TRUE))  # Summing OD600 as a proxy for fitness
# Define the custom order
custom_order <- c("WT", "SPOIIE", "sigF", "sigG")
# Convert Strain to a factor with this order
fitness.sum.LB$Strain <- factor(fitness.sum.LB$Strain, levels = custom_order)
# Plot
ggplot(fitness.sum.LB, aes(x = Strain, y = Fitness, fill = Strain)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Strain Fitness in LB Media (Ctrl)",
x = "Strain",
y = "Fitness (Sum of OD600)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#For DSM
#Filter for LB media and Ctrl infection
filter.DSM<- OD.long %>%
filter(Media == "DSM", Infection == "Ctrl") %>%
select(Time, OD600, Strain)
#Summarize OD600 for each strain across all time points
fitness.sum.DSM <- filter.DSM %>%
group_by(Strain) %>%
summarize(Fitness = sum(OD600, na.rm = TRUE))  # Summing OD600 as a proxy for fitness
# Convert Strain to a factor with this order
fitness.sum.DSM$Strain <- factor(fitness.sum.DSM$Strain, levels = custom_order)
# Plot
ggplot(fitness.sum.DSM, aes(x = Strain, y = Fitness, fill = Strain)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Strain Fitness in DSM Media (Ctrl)",
x = "Strain",
y = "Fitness (Sum of OD600)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Get unique strains
strains <- unique(OD.long$Strain)
# Initialize list to store matrices
strain_matrices <- list()
# Loop through each strain
for (strain in strains) {
# Filter for the current strain and LB media
strain_data <- OD.long %>%
filter(Media == "LB", Strain == strain) %>%
select(Time, Infection, OD600) %>%
mutate(OD600 = as.numeric(OD600))  # Ensure OD600 is numeric
# Reshape data: Time as rows, Infection as columns (handling duplicates)
strain_matrix <- strain_data %>%
tidyr::pivot_wider(names_from = Infection, values_from = OD600, values_fn = mean)
# Convert to numeric matrix (remove Time column)
strain_matrix <- as.matrix(strain_matrix[, -1, drop = FALSE])  # Drop Time column
mode(strain_matrix) <- "numeric"  # Ensure numeric
# Store matrix in list
strain_matrices[[strain]] <- strain_matrix
}
# Compute fitness by summing OD600 for each infection condition
fitness_values <- lapply(strain_matrices, function(mat) {
colSums(mat, na.rm = TRUE)  # Sum numeric values
})
# Convert to data frame for easier analysis
fitness_df <- do.call(rbind, fitness_values)
rownames(fitness_df) <- names(fitness_values)
fitness_df_adj <- fitness_df  # Create a copy to store adjusted values
fitness_df_adj <- sweep(fitness_df, 1, fitness_df[, 3], FUN = "-")
# Initialize list to store matrices
strain_matrices.d <- list()
# Loop through each strain
for (strain in strains) {
# Filter for the current strain and LB media
strain_data.d <- OD.long %>%
filter(Media == "DSM", Strain == strain) %>%
select(Time, Infection, OD600) %>%
mutate(OD600 = as.numeric(OD600))  # Ensure OD600 is numeric
# Reshape data: Time as rows, Infection as columns (handling duplicates)
strain_matrix.d <- strain_data.d %>%
tidyr::pivot_wider(names_from = Infection, values_from = OD600, values_fn = mean)
# Convert to numeric matrix (remove Time column)
strain_matrix.d <- as.matrix(strain_matrix.d[, -1, drop = FALSE])  # Drop Time column
mode(strain_matrix.d) <- "numeric"  # Ensure numeric
# Store matrix in list
strain_matrices.d[[strain]] <- strain_matrix.d
}
# Compute fitness by summing OD600 for each infection condition
fitness_values.d <- lapply(strain_matrices.d, function(mat.d) {
colSums(mat.d, na.rm = TRUE)  # Sum numeric values
})
# Convert to data frame for easier analysis
fitness_df.d <- do.call(rbind, fitness_values.d)
rownames(fitness_df.d) <- names(fitness_values.d)
# Adjusted fitness values (subtract third column from all other columns)
fitness_df_adj.d <- fitness_df.d  # Create a copy to store adjusted values
fitness_df_adj.d <- sweep(fitness_df.d, 1, fitness_df.d[, 3], FUN = "-")
# Output results
fitness_df_adj.d
# Convert row names into a proper column (Strain) before merging
fitness.LB <- fitness_df_adj %>%
as.data.frame() %>%
tibble::rownames_to_column(var = "Strain")
fitness.DSM <- fitness_df_adj.d %>%
as.data.frame() %>%
tibble::rownames_to_column(var = "Strain")
# Add Media column
fitness.LB$Media <- "LB"
fitness.DSM$Media <- "DSM"
# Combine datasets properly
fitness_combined <- bind_rows(fitness.LB, fitness.DSM)  # bind_rows() prevents row name issues
# Convert row names to a column (Strain)
fitness_combined$Strain <- as.factor(fitness_combined$Strain)
# Ensure Media, Strain, and Infection are factors
fitness_combined$Media <- as.factor(fitness_combined$Media)
fitness_combined$Strain <- as.factor(fitness_combined$Strain)
# Convert to long format while keeping Media
fitness_long <- fitness_combined %>%
pivot_longer(cols = -c(Strain, Media), names_to = "Infection", values_to = "Fitness")
# Ensure Infection is a factor
fitness_long$Infection <- as.factor(fitness_long$Infection)
#remove ctrl
#fitness_long<-fitness_long[!apply(fitness_long, 1, function(row) any(row=="Ctrl")), ]
# Run 3-way ANOVA model with Media included
anova_model <- aov(Fitness ~ Strain * Infection * Media, data = fitness_long)
# Display ANOVA results
summary.aov(anova_model)
install.packages("car")  # If not already installed
library(car)
Anova(anova_model, type = 2)  # Type II ANOVA
install.packages("car")
summary(anova_model)
# Display ANOVA results
summary.aov(anova_model)
Anova(anova_model, type = 2)  # Type II ANOVA
