# Join with the main data to filter for these time points
fluorescence_comparison_filtered <- fluorescence_comparison %>%
semi_join(sufficient_data, by = c("Time_hours", "Design"))
# Perform a t-test on the mean fluorescence values at each time point
t_test_results <- fluorescence_comparison_filtered %>%
group_by(Time_hours) %>%
filter(Design %in% c("CDSM 1:10 GFP", "CDSM 1:10 Separate GFP")) %>%
summarize(
t_test = list(t.test(Fluorescence[Design == "CDSM 1:10 GFP"], Fluorescence[Design == "CDSM 1:10 Separate GFP"])),
.groups = 'drop'
)
# Filter for time points with sufficient data
sufficient_data <- data_check %>%
filter(Design %in% c("CDSM 1:10 GFP", "CDSM 1:10 Separate GFP")) %>%
group_by(Time_hours) %>%
filter(count >= 2)  # Adjust this threshold based on your needs
# Join with the main data to filter for these time points
fluorescence_comparison_filtered <- fluorescence_comparison %>%
semi_join(sufficient_data, by = c("Time_hours", "Design"))
# Perform a t-test on the fluorescence values
t_test_results <- fluorescence_comparison_filtered %>%
group_by(Time_hours) %>%
filter(Design %in% c("CDSM 1:10 GFP", "CDSM 1:10 Separate GFP")) %>%
summarize(
t_test = list(t.test(Fluorescence[Design == "CDSM 1:10 GFP"], Fluorescence[Design == "CDSM 1:10 Separate GFP"])),
.groups = 'drop'
)
# Filter to keep only time points with at least some observations for each Design
data_counts <- fluorescence_comparison %>%
group_by(Time_hours, Design) %>%
summarize(count = n(), .groups = 'drop')
# Keep only those time points with sufficient data (e.g., more than 1 observation per group)
valid_times <- data_counts %>%
filter(count > 1) %>%
pull(Time_hours) %>%
unique()
# Filter the original data
fluorescence_comparison_filtered <- fluorescence_comparison %>%
filter(Time_hours %in% valid_times)
# Perform t-test on the fluorescence values
t_test_results <- fluorescence_comparison_filtered %>%
group_by(Time_hours) %>%
filter(Design %in% c("CDSM 1:10 GFP", "CDSM 1:10 Separate GFP")) %>%
summarize(
t_test = ifelse(
sum(Design == "CDSM 1:10 GFP") > 1 & sum(Design == "CDSM 1:10 Separate GFP") > 1,
list(t.test(Fluorescence[Design == "CDSM 1:10 GFP"], Fluorescence[Design == "CDSM 1:10 Separate GFP"])),
NA
),
.groups = 'drop'
) %>%
mutate(p_value = ifelse(is.na(t_test), NA, sapply(t_test, function(x) x$p.value))) %>%
select(Time_hours, p_value)
print(t_test_results)
# Perform Wilcoxon rank-sum test on the fluorescence values
wilcoxon_results <- fluorescence_comparison_filtered %>%
group_by(Time_hours) %>%
filter(Design %in% c("CDSM 1:10 GFP", "CDSM 1:10 Separate GFP")) %>%
summarize(
wilcoxon = ifelse(
sum(Design == "CDSM 1:10 GFP") > 1 & sum(Design == "CDSM 1:10 Separate GFP") > 1,
list(wilcox.test(Fluorescence[Design == "CDSM 1:10 GFP"], Fluorescence[Design == "CDSM 1:10 Separate GFP"])),
NA
),
.groups = 'drop'
) %>%
mutate(p_value = ifelse(is.na(wilcoxon), NA, sapply(wilcoxon, function(x) x$p.value))) %>%
select(Time_hours, p_value)
print(wilcoxon_results)
print(t_test_results)
View(t_test_results)
# Check unique values in Design to confirm consistency
unique(fluorescence_comparison$Design)
# Check the number of observations for each time point and condition
fluorescence_comparison %>%
group_by(Time_hours, Design) %>%
summarize(count = n(), .groups = 'drop')
# Check for NA or infinite values
sum(is.na(fluorescence_comparison$Fluorescence))
sum(is.infinite(fluorescence_comparison$Fluorescence))
# Check the data for each time point and condition
check_data <- fluorescence_comparison %>%
filter(Design %in% c("CDSM 1:10 GFP", "CDSM 1:10 Separate GFP")) %>%
group_by(Time_hours, Design) %>%
summarize(count = n(), .groups = 'drop')
print(check_data)
# Example: Check data availability at a specific time point
example_time_point <- 1  # Replace with an actual time point
example_data <- fluorescence_comparison %>%
filter(Time_hours == example_time_point, Design %in% c("CDSM 1:10 GFP", "CDSM 1:10 Separate GFP"))
print(example_data)
View(example_data)
# Print unique values in Design to verify correctness
unique(fluorescence_comparison$Design)
# Filter out any rows where the Design contains "Blank" and "CTRL"
fluorescence_long_filtered <- fluorescence_long %>%
filter(!grepl("Blank|CTRL", Design, ignore.case = TRUE))
# Convert Time to hours (assuming Time was initially in minutes)
fluorescence_long_filtered <- fluorescence_long_filtered %>%
mutate(Time_hours = Time / 60)
# Group by Time and Design, and calculate the mean fluorescence for each group
fluorescence_summary <- fluorescence_long_filtered %>%
group_by(Time_hours, Design) %>%
summarize(mean_fluorescence = mean(Fluorescence, na.rm = TRUE))
# Perform a t-test
t_test_results <- fluorescence_comparison %>%
filter(Design %in% c("CDSM 1:10 + GFP", "CDSM 1:10 Separate + GFP")) %>%
group_by(Time_hours) %>%
summarize(
t_test = list(t.test(Fluorescence[Design == "CDSM 1:10 + GFP"], Fluorescence[Design == "CDSM 1:10 Separate + GFP"])),
.groups = 'drop'
) %>%
mutate(p_value = map_dbl(t_test, ~ .x$p.value))
# Load necessary libraries
library(tidyverse)
# File paths
fluorescence_file <- "C:/Users/parke/Indiana University/Lennon, Jay - 0000_Park/Data/Fluor Data R/20240915.Fluor.csv"
design_file <- "C:/Users/parke/Indiana University/Lennon, Jay - 0000_Park/Data/Fluor Data R/Design 3.csv"
# Read the fluorescence data
fluorescence_data <- read.csv(fluorescence_file)
# Read the design file
design_data <- read.csv(design_file, header = FALSE)
# Extract media and cell types from the design data
media_type <- design_data[1:8, ]
cell_type <- design_data[9:16, ]
# Flatten the design data into vectors
media_type_flat <- as.vector(t(media_type))
cell_type_flat <- as.vector(t(cell_type))
# Combine media and cell types into a single vector
combined_design <- paste(media_type_flat, cell_type_flat, sep = " + ")
# Prepare the fluorescence data for merging
fluorescence_long <- fluorescence_data %>%
pivot_longer(cols = -Time, names_to = "Well", values_to = "Fluorescence")
# Ensure that the 'Time' column is numeric
fluorescence_long <- fluorescence_long %>%
mutate(Time = as.numeric(Time))
# Map each well to its corresponding design (media + cell type)
fluorescence_long$Design <- combined_design[match(fluorescence_long$Well, names(fluorescence_data)[-1])]
# Filter out any rows where the Design contains "Blank"
fluorescence_long_filtered <- fluorescence_long %>%
filter(!grepl("Blank", Design))
#Or filter blank and ctrls
fluorescence_long_filtered <- fluorescence_long %>%
filter(!grepl("Blank|CTRL", Design, ignore.case = TRUE))
# Convert Time to hours (assuming Time was initially in minutes)
fluorescence_long_filtered <- fluorescence_long_filtered %>%
mutate(Time_hours = Time / 60)
# Group by Time and Design, and calculate the mean fluorescence for each group
fluorescence_summary <- fluorescence_long_filtered %>%
group_by(Time_hours, Design) %>%
summarize(mean_fluorescence = mean(Fluorescence, na.rm = TRUE))
# Plot the mean fluorescence over time, with thicker lines (size = 1.5)
ggplot(fluorescence_summary, aes(x = Time_hours, y = mean_fluorescence, color = Design)) +
geom_line(size = 1) +  # Adjust the size parameter to make lines thicker
theme_minimal() +
labs(title = "Mean Fluorescence Over Time by Media + Cell Type", x = "Time (hours)", y = "Mean Fluorescence", color = "Media + Cell Type") +
scale_x_continuous(breaks = seq(0, max(fluorescence_summary$Time_hours, na.rm = TRUE), by = 1)) +  # X-axis in 1-hour increments
theme(legend.position = "right")
setwd("C:/Users/parke/OneDrive - Indiana University/GitHub")
ls
rm(list = ls())
knitr::opts_knit$set(root.dir = "C:/Users/parke/OneDrive - Indiana University/GitHub/ASG-fitness-effects/microplate fitness assay")
getwd()
setwd("C:/Users/parke/OneDrive - Indiana University/GitHub/ASG-fitness-effects/microplate fitness assay")
getwd()
knitr::opts_knit$set(root.dir = "C:/Users/parke/OneDrive - Indiana University/GitHub/ASG-fitness-effects/microplate fitness assay/data")
getwd()
knitr::opts_knit$set(root.dir = "C:/Users/parke/OneDrive - Indiana University/GitHub/ASG-fitness-effects/microplate fitness assay/")
getwd()
setwd("C:/Users/parke/OneDrive - Indiana University/GitHub/ASG-fitness-effects/microplate fitness assay/")
getwd()
#load data
getwd()
knitr::opts_knit$set(root.dir = "C:/Users/parke/OneDrive - Indiana University/GitHub/ASG-fitness-effects/microplate fitness assay/")
#load data
getwd()
setwd("C:/Users/parke/OneDrive - Indiana University/GitHub/ASG-fitness-effects/microplate fitness assay/")
#load data
getwd()
getwd()
setwd("C:/Users/parke/OneDrive - Indiana University/GitHub/ASG-fitness-effects/microplate fitness assay/")
getwd()
setwd("C:/Users/parke/OneDrive - Indiana University/GitHub/ASG-fitness-effects/microplate fitness assay/")
getwd()
getwd()
getwd()
getwd()
rm(list = ls())
knitr::opts_knit$set(root.dir = "C:/Users/parke/OneDrive - Indiana University/GitHub/ASG-fitness-effects/microplate fitness assay/")
setwd("C:/Users/parke/OneDrive - Indiana University/GitHub/ASG-fitness-effects/microplate fitness assay/")
getwd()
#install.packages("tidyverse")
require("png")
require("dplyr")
library("tidyverse")
require("grid")
require("tibble")
require("knitr")
require("extrafont")
require("ggrepel");
require("gridExtra")
require("contrast")
sem <- function(x) sqrt(var(x)/length(x))
cv <- function(x) (sd(x)/mean(x))*100
#load data
data<-read.csv("~//20250211OD600.csv")
getwd()
setwd("C:/Users/parke/OneDrive - Indiana University/GitHub/ASG-fitness-effects/microplate fitness assay/")
#load data
data<-read.csv("~/data/20250211OD600.csv")
#load data
data<-read.csv("~./data/20250211OD600.csv")
#load data
data<-read.csv("./data/20250211OD600.csv")
getwd()
getwd()
setwd("C:/Users/parke/OneDrive - Indiana University/GitHub/ASG-fitness-effects/microplate fitness assay")
#load data
data<-read.csv("./data/20250211OD600.csv")
getwd()
getwd()
rm(list = ls())
setwd("C:/Users/parke/OneDrive - Indiana University/GitHub/ASG-fitness-effects/microplate_fitness_assay")
knitr::opts_knit$set(root.dir = "C:/Users/parke/OneDrive - Indiana University/GitHub/ASG-fitness-effects/microplate_fitness_assay/")
getwd()
#install.packages("tidyverse")
require("png")
require("dplyr")
library("tidyverse")
require("grid")
require("tibble")
require("knitr")
require("extrafont")
require("ggrepel");
require("gridExtra")
require("contrast")
sem <- function(x) sqrt(var(x)/length(x))
cv <- function(x) (sd(x)/mean(x))*100
#load data
data<-read.csv("./data/20250228OD600.csv")
design<-read.csv("./reference/20250228OD600Design.csv", header=FALSE)
#subset design file, "wells" will be strain plus treatment but I can update design file to include a separate column for both
media<-design[1:8,1:12]
strain<-design[9:16,1:12]
infection<-design[17:24, 1:12]
# Create custom labels
rows <- LETTERS[1:8]  # A to H
cols <- 1:12  # 1 to 12
custom_labels <- unlist(lapply(rows, function(row) paste0(row, cols)))
#convert to long
med.long <- as.data.frame(pivot_longer(media, cols = everything(),
names_to = "Well", values_to = "Media"))
stn.long <- as.data.frame(pivot_longer(strain, cols = everything(),
names_to = "Well", values_to = "Strain"))
inf.long <- as.data.frame(pivot_longer(infection, cols = everything(),
names_to = "Well", values_to = "Infection"))
# Prepare the OD data for merging
OD.long <- data %>%
pivot_longer(cols = -Time, names_to="Well", values_to="OD600")
str(OD.long)
#combine
OD.long$Media<-rep(med.long$Media, length.out=nrow(OD.long))
OD.long$Strain<-rep(stn.long$Strain, length.out=nrow(OD.long))
OD.long$Infection<-rep(inf.long$Infection, length.out=nrow(OD.long))
#filter out "Blanks"
summary<-OD.long[!apply(OD.long, 1, function(row) any(row=="Blank")), ]
#it worked!!
# Get unique combinations of Media, Infection, and Strain
combinations <- summary %>%
distinct(Media, Infection, Strain)
# Create data frames for each combination
for (i in 1:nrow(combinations)) {
strain <- combinations$Strain[i]
media <- combinations$Media[i]
infection <- combinations$Infection[i]
vector_name <- paste(strain, media, infection, sep = ".")
assign(vector_name, summary %>%
filter(Strain == strain, Media == media, Infection == infection) %>%
select(Time, OD600))
}
# Calculate the average OD600 for each time point for wt strains
wt_combinations <- combinations %>%
filter(grepl("WT", Strain))
for (i in 1:nrow(wt_combinations)) {
media <- wt_combinations$Media[i]
infection <- wt_combinations$Infection[i]
wt_vector_name <- paste("WT", media, infection, sep = ".")
avg_vector_name <- paste("avg", media, infection, sep = ".")
avg_vector <- get(wt_vector_name) %>%
group_by(Time) %>%
mutate(avg_OD600 = mean(OD600, na.rm = TRUE)) %>%
ungroup()
assign(avg_vector_name, avg_vector)
}
# Ensure non_wt_combinations is created correctly
non_wt_combinations <- combinations %>%
filter(!grepl("WT", Strain))
fitness_list <- list()
for (i in 1:nrow(non_wt_combinations)) {
strain <- non_wt_combinations$Strain[i]
media <- non_wt_combinations$Media[i]
infection <- non_wt_combinations$Infection[i]
non_wt_vector_name <- paste(strain, media, infection, sep = ".")
avg_vector_name <- paste("avg", media, infection, sep = ".")
fitness_vector_name <- paste(media, strain, infection, "fitness", sep = ".")
fitness_vector <- get(non_wt_vector_name)$OD600 - get(avg_vector_name)$avg_OD600
assign(fitness_vector_name, fitness_vector)
fitness_list[[fitness_vector_name]] <- fitness_vector
}
# Sum all fitness vectors into one data frame named pm
pm <- data.frame(
media = character(),
strain = character(),
infection = character(),
fitness_value = numeric()
)
for (name in names(fitness_list)) {
parts <- strsplit(name, "\\.")[[1]]
media <- parts[1]
strain <- parts[2]
infection <- parts[3]
fitness_value <- sum(fitness_list[[name]])
pm <- rbind(pm, data.frame(media = media, strain = strain, infection = infection, fitness_value = fitness_value))
}
# Create the media.strain.infection variable manually
pm$media.strain.infection <- paste(pm$media, pm$strain, pm$infection, sep = ".")
# Plot fitness
setwd('./output')
plot.new()
bg<- ggplot(pm, aes(x = media.strain.infection, y = fitness_value)) +
geom_bar(stat = "identity") +
labs(title = "Fitness effects of sporulation mutations", x = "Media.Strain.Infection", y = "Fitness") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8), # Rotate and adjust size of x-axis labels
legend.key.size = unit(1, 'cm'),
legend.position = "right") +
scale_y_continuous(breaks = c(pretty(pm$fitness_value), 300)) # Add tick mark at 500
ggsave("20250228_fitness.png", plot = bg, width = 10, height = 12, dpi = 300)
print(bg)
ggsave("20250228_fitness.png", plot = bg, width = 12, height = 8, dpi = 300)
rm(list = ls())
setwd("C:/Users/parke/OneDrive - Indiana University/GitHub/ASG-fitness-effects/microplate_fitness_assay/output")
knitr::opts_knit$set(root.dir = "C:/Users/parke/OneDrive - Indiana University/GitHub/ASG-fitness-effects/microplate_fitness_assay/output")
getwd()
#install.packages("tidyverse")
require("png")
require("dplyr")
library("tidyverse")
require("grid")
require("tibble")
require("knitr")
require("extrafont")
require("ggrepel");
require("gridExtra")
require("contrast")
sem <- function(x) sqrt(var(x)/length(x))
cv <- function(x) (sd(x)/mean(x))*100
#load data
data<-read.csv("./data/20250228OD600.csv")
rm(list = ls())
setwd("C:/Users/parke/OneDrive - Indiana University/GitHub/ASG-fitness-effects/microplate_fitness_assay/output")
knitr::opts_knit$set(root.dir = "C:/Users/parke/OneDrive - Indiana University/GitHub/ASG-fitness-effects/microplate_fitness_assay/output")
getwd()
#install.packages("tidyverse")
require("png")
require("dplyr")
library("tidyverse")
require("grid")
require("tibble")
require("knitr")
require("extrafont")
require("ggrepel");
require("gridExtra")
require("contrast")
sem <- function(x) sqrt(var(x)/length(x))
cv <- function(x) (sd(x)/mean(x))*100
#load data
data<-read.csv("../data/20250228OD600.csv")
design<-read.csv("../reference/20250228OD600Design.csv", header=FALSE)
#subset design file, "wells" will be strain plus treatment but I can update design file to include a separate column for both
media<-design[1:8,1:12]
strain<-design[9:16,1:12]
infection<-design[17:24, 1:12]
# Create custom labels
rows <- LETTERS[1:8]  # A to H
cols <- 1:12  # 1 to 12
custom_labels <- unlist(lapply(rows, function(row) paste0(row, cols)))
#convert to long
med.long <- as.data.frame(pivot_longer(media, cols = everything(),
names_to = "Well", values_to = "Media"))
stn.long <- as.data.frame(pivot_longer(strain, cols = everything(),
names_to = "Well", values_to = "Strain"))
inf.long <- as.data.frame(pivot_longer(infection, cols = everything(),
names_to = "Well", values_to = "Infection"))
# Prepare the OD data for merging
OD.long <- data %>%
pivot_longer(cols = -Time, names_to="Well", values_to="OD600")
str(OD.long)
#combine
OD.long$Media<-rep(med.long$Media, length.out=nrow(OD.long))
OD.long$Strain<-rep(stn.long$Strain, length.out=nrow(OD.long))
OD.long$Infection<-rep(inf.long$Infection, length.out=nrow(OD.long))
#filter out "Blanks"
summary<-OD.long[!apply(OD.long, 1, function(row) any(row=="Blank")), ]
#it worked!!
# Get unique combinations of Media, Infection, and Strain
combinations <- summary %>%
distinct(Media, Infection, Strain)
# Create data frames for each combination
for (i in 1:nrow(combinations)) {
strain <- combinations$Strain[i]
media <- combinations$Media[i]
infection <- combinations$Infection[i]
vector_name <- paste(strain, media, infection, sep = ".")
assign(vector_name, summary %>%
filter(Strain == strain, Media == media, Infection == infection) %>%
select(Time, OD600))
}
# Calculate the average OD600 for each time point for wt strains
wt_combinations <- combinations %>%
filter(grepl("WT", Strain))
for (i in 1:nrow(wt_combinations)) {
media <- wt_combinations$Media[i]
infection <- wt_combinations$Infection[i]
wt_vector_name <- paste("WT", media, infection, sep = ".")
avg_vector_name <- paste("avg", media, infection, sep = ".")
avg_vector <- get(wt_vector_name) %>%
group_by(Time) %>%
mutate(avg_OD600 = mean(OD600, na.rm = TRUE)) %>%
ungroup()
assign(avg_vector_name, avg_vector)
}
# Ensure non_wt_combinations is created correctly
non_wt_combinations <- combinations %>%
filter(!grepl("WT", Strain))
fitness_list <- list()
for (i in 1:nrow(non_wt_combinations)) {
strain <- non_wt_combinations$Strain[i]
media <- non_wt_combinations$Media[i]
infection <- non_wt_combinations$Infection[i]
non_wt_vector_name <- paste(strain, media, infection, sep = ".")
avg_vector_name <- paste("avg", media, infection, sep = ".")
fitness_vector_name <- paste(media, strain, infection, "fitness", sep = ".")
fitness_vector <- get(non_wt_vector_name)$OD600 - get(avg_vector_name)$avg_OD600
assign(fitness_vector_name, fitness_vector)
fitness_list[[fitness_vector_name]] <- fitness_vector
}
# Sum all fitness vectors into one data frame named pm
pm <- data.frame(
media = character(),
strain = character(),
infection = character(),
fitness_value = numeric()
)
for (name in names(fitness_list)) {
parts <- strsplit(name, "\\.")[[1]]
media <- parts[1]
strain <- parts[2]
infection <- parts[3]
fitness_value <- sum(fitness_list[[name]])
pm <- rbind(pm, data.frame(media = media, strain = strain, infection = infection, fitness_value = fitness_value))
}
# Create the media.strain.infection variable manually
pm$media.strain.infection <- paste(pm$media, pm$strain, pm$infection, sep = ".")
# Plot fitness
setwd('./output')
bg<- ggplot(pm, aes(x = media.strain.infection, y = fitness_value)) +
geom_bar(stat = "identity") +
labs(title = "Fitness effects of sporulation mutations", x = "Media.Strain.Infection", y = "Fitness") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8), # Rotate and adjust size of x-axis labels
legend.key.size = unit(1, 'cm'),
legend.position = "right") +
scale_y_continuous(breaks = c(pretty(pm$fitness_value), 300)) # Add tick mark at 500
ggsave("20250228_fitness.png", plot = bg, width = 12, height = 8, dpi = 300)
#plot
plot.new()
par(mar = c(7, 7, 5, 7))
# Plot all growth over time in one plot, colored by design
p<-ggplot(summary, aes(x = Time, y = OD600, colour = interaction(Strain, Media, Infection)))+
geom_line() +
theme_minimal() + geom_smooth()+
labs(title = "OD600 over Time for All Samples", x = "Time", y = "OD600", colour = "Media.Strain.Treatment") +
theme(legend.key.size = unit(0.5, 'cm'), legend.position = "right")+
facet_wrap(~Strain + Media + Infection)
ggsave("20250228_all.png", plot = p, width = 10, height = 6, dpi = 300)
print(p)
#plot and sort by Media
m<-ggplot(summary, aes(x = Time, y = OD600, colour = interaction(Strain, Infection)))+
#geom_line() +
theme_minimal() + geom_smooth()+
labs(title = "OD600 over Time by Media", x = "Time", y = "OD600", colour = "Strain.Treatment") +
theme(legend.key.size = unit(0.5, 'cm'), legend.position = "right")+
facet_wrap(~Media)
ggsave("20250228_Media.png", plot = m, width = 8, height = 5, dpi = 300)
print(m)
#plot and sort by treatment
d<-ggplot(summary, aes(x = Time, y = OD600, colour = interaction(Media, Infection))) +
#geom_line() +
theme_minimal() + geom_smooth()+
labs(title = "OD600 over Time by Strain", x = "Time", y = "OD600", colour = "Media.Infection") +
theme(legend.key.size = unit(0.5, 'cm'), legend.position = "right")+
facet_wrap(~Strain)
ggsave("20250228_Strains.png", plot = d, width = 6, height = 4, dpi = 300)
print(d)
#plot and sort by infection
s <- ggplot(summary, aes(x = Time, y = OD600, colour = interaction(Strain, Media))) +
theme_minimal() +
geom_smooth() +
labs(title = "OD600 over Time by Treatment", x = "Time", y = "OD600", colour = "Strain") +
theme(legend.key.size = unit(0.5, 'cm'), legend.position = "right") +
facet_wrap(~Infection)
ggsave("20250228_Infection.png", plot = s, width = 6, height = 4, dpi = 300)
setwd("C:/Users/parke/OneDrive - Indiana University/GitHub/ASG-fitness-effects/microplate_fitness_assay")
