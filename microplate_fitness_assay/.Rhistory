# Combine media and cell types into a single vector
combined_design <- paste(media_type_flat, cell_type_flat, sep = " + ")
# Prepare the fluorescence data for merging
fluorescence_long <- fluorescence_data %>%
pivot_longer(cols = -Time, names_to = "Well", values_to = "Fluorescence")
# Ensure that the 'Time' column is numeric
fluorescence_long <- fluorescence_long %>%
mutate(Time = as.numeric(Time))
# Map each well to its corresponding design (media + cell type)
fluorescence_long$Design <- combined_design[match(fluorescence_long$Well, names(fluorescence_data)[-1])]
# Filter out any rows where the Design contains "Blank" or "CTRL"
fluorescence_long_filtered <- fluorescence_long %>%
filter(!grepl("Blank|CTRL", Design, ignore.case = TRUE))
# Convert Time to hours (assuming Time was initially in minutes)
fluorescence_long_filtered <- fluorescence_long_filtered %>%
mutate(Time_hours = Time / 60)
# Group by Time and Design, and calculate the mean fluorescence for each group
fluorescence_summary <- fluorescence_long_filtered %>%
group_by(Time_hours, Design) %>%
summarize(mean_fluorescence = mean(Fluorescence, na.rm = TRUE), .groups = 'drop')
# Plot the mean fluorescence over time
ggplot(fluorescence_summary, aes(x = Time_hours, y = mean_fluorescence, color = Design)) +
geom_line() +  # Default line thickness
theme_minimal() +
labs(title = "Mean Fluorescence Over Time by Media + Cell Type", x = "Time (hours)", y = "Mean Fluorescence", color = "Media + Cell Type") +
scale_x_continuous(breaks = seq(0, max(fluorescence_summary$Time_hours, na.rm = TRUE), by = 1)) +  # X-axis in 1-hour increments
theme(legend.position = "right")
# Load necessary libraries
library(tidyverse)
# File paths
fluorescence_file <- "C:/Users/parke/Indiana University/Lennon, Jay - 0000_Park/Data/Fluor Data R/20240915.Fluor.csv"
design_file <- "C:/Users/parke/Indiana University/Lennon, Jay - 0000_Park/Data/Fluor Data R/Design 3.csv"
# Read the fluorescence data
fluorescence_data <- read.csv(fluorescence_file)
# Read the design file
design_data <- read.csv(design_file, header = FALSE)
# Extract media and cell types from the design data
media_type <- design_data[1:8, ]
cell_type <- design_data[9:16, ]
# Flatten the design data into vectors
media_type_flat <- as.vector(t(media_type))
cell_type_flat <- as.vector(t(cell_type))
# Combine media and cell types into a single vector
combined_design <- paste(media_type_flat, cell_type_flat, sep = " + ")
# Prepare the fluorescence data for merging
fluorescence_long <- fluorescence_data %>%
pivot_longer(cols = -Time, names_to = "Well", values_to = "Fluorescence")
# Ensure that the 'Time' column is numeric
fluorescence_long <- fluorescence_long %>%
mutate(Time = as.numeric(Time))
# Map each well to its corresponding design (media + cell type)
fluorescence_long$Design <- combined_design[match(fluorescence_long$Well, names(fluorescence_data)[-1])]
# Filter out any rows where the Design contains "Blank" or "CTRL"
fluorescence_long_filtered <- fluorescence_long %>%
filter(!grepl("Blank|CTRL", Design, ignore.case = TRUE))
# Convert Time to hours (assuming Time was initially in minutes)
fluorescence_long_filtered <- fluorescence_long_filtered %>%
mutate(Time_hours = Time / 60)
# Group by Time and Design, and calculate the mean fluorescence for each group
fluorescence_summary <- fluorescence_long_filtered %>%
group_by(Time_hours, Design) %>%
summarize(mean_fluorescence = mean(Fluorescence, na.rm = TRUE), .groups = 'drop')
# Plot the mean fluorescence over time
ggplot(fluorescence_summary, aes(x = Time_hours, y = mean_fluorescence, color = Design)) +
geom_line(size = 1) +  # Default line thickness
theme_minimal() +
labs(title = "Mean Fluorescence Over Time by Media + Cell Type", x = "Time (hours)", y = "Mean Fluorescence", color = "Media + Cell Type") +
scale_x_continuous(breaks = seq(0, max(fluorescence_summary$Time_hours, na.rm = TRUE), by = 1)) +  # X-axis in 1-hour increments
theme(legend.position = "right")
# Load necessary libraries
library(tidyverse)
library(RColorBrewer)  # For color palettes
# File paths
fluorescence_file <- "C:/Users/parke/Indiana University/Lennon, Jay - 0000_Park/Data/Fluor Data R/20240915.Fluor.csv"
design_file <- "C:/Users/parke/Indiana University/Lennon, Jay - 0000_Park/Data/Fluor Data R/Design 3.csv"
# Read the fluorescence data
fluorescence_data <- read.csv(fluorescence_file)
# Read the design file
design_data <- read.csv(design_file, header = FALSE)
# Extract media and cell types from the design data
media_type <- design_data[1:8, ]
cell_type <- design_data[9:16, ]
# Flatten the design data into vectors
media_type_flat <- as.vector(t(media_type))
cell_type_flat <- as.vector(t(cell_type))
# Combine media and cell types into a single vector
combined_design <- paste(media_type_flat, cell_type_flat, sep = " + ")
# Prepare the fluorescence data for merging
fluorescence_long <- fluorescence_data %>%
pivot_longer(cols = -Time, names_to = "Well", values_to = "Fluorescence")
# Ensure that the 'Time' column is numeric
fluorescence_long <- fluorescence_long %>%
mutate(Time = as.numeric(Time))
# Map each well to its corresponding design (media + cell type)
fluorescence_long$Design <- combined_design[match(fluorescence_long$Well, names(fluorescence_data)[-1])]
# Filter out any rows where the Design contains "Blank" or "CTRL"
fluorescence_long_filtered <- fluorescence_long %>%
filter(!grepl("Blank|CTRL", Design, ignore.case = TRUE))
# Convert Time to hours (assuming Time was initially in minutes)
fluorescence_long_filtered <- fluorescence_long_filtered %>%
mutate(Time_hours = Time / 60)
# Group by Time and Design, and calculate the mean fluorescence for each group
fluorescence_summary <- fluorescence_long_filtered %>%
group_by(Time_hours, Design) %>%
summarize(mean_fluorescence = mean(Fluorescence, na.rm = TRUE), .groups = 'drop')
# Plot the mean fluorescence over time with Set1 palette
ggplot(fluorescence_summary, aes(x = Time_hours, y = mean_fluorescence, color = Design)) +
geom_line(size = 1) +  # Line thickness set to 1
theme_minimal() +
labs(title = "Mean Fluorescence Over Time by Media + Cell Type", x = "Time (hours)", y = "Mean Fluorescence", color = "Media + Cell Type") +
scale_x_continuous(breaks = seq(0, max(fluorescence_summary$Time_hours, na.rm = TRUE), by = 1)) +  # X-axis in 1-hour increments
scale_color_brewer(palette = "Set1") +  # Apply Set1 palette
theme(legend.position = "right")
# Load necessary libraries
library(tidyverse)
library(viridis)  # For color palettes
# File paths
fluorescence_file <- "C:/Users/parke/Indiana University/Lennon, Jay - 0000_Park/Data/Fluor Data R/20240915.Fluor.csv"
design_file <- "C:/Users/parke/Indiana University/Lennon, Jay - 0000_Park/Data/Fluor Data R/Design 3.csv"
# Read the fluorescence data
fluorescence_data <- read.csv(fluorescence_file)
# Read the design file
design_data <- read.csv(design_file, header = FALSE)
# Extract media and cell types from the design data
media_type <- design_data[1:8, ]
cell_type <- design_data[9:16, ]
# Flatten the design data into vectors
media_type_flat <- as.vector(t(media_type))
cell_type_flat <- as.vector(t(cell_type))
# Combine media and cell types into a single vector
combined_design <- paste(media_type_flat, cell_type_flat, sep = " + ")
# Prepare the fluorescence data for merging
fluorescence_long <- fluorescence_data %>%
pivot_longer(cols = -Time, names_to = "Well", values_to = "Fluorescence")
# Ensure that the 'Time' column is numeric
fluorescence_long <- fluorescence_long %>%
mutate(Time = as.numeric(Time))
# Map each well to its corresponding design (media + cell type)
fluorescence_long$Design <- combined_design[match(fluorescence_long$Well, names(fluorescence_data)[-1])]
# Filter out any rows where the Design contains "Blank" or "CTRL"
fluorescence_long_filtered <- fluorescence_long %>%
filter(!grepl("Blank|CTRL", Design, ignore.case = TRUE))
# Convert Time to hours (assuming Time was initially in minutes)
fluorescence_long_filtered <- fluorescence_long_filtered %>%
mutate(Time_hours = Time / 60)
# Group by Time and Design, and calculate the mean fluorescence for each group
fluorescence_summary <- fluorescence_long_filtered %>%
group_by(Time_hours, Design) %>%
summarize(mean_fluorescence = mean(Fluorescence, na.rm = TRUE), .groups = 'drop')
# Plot the mean fluorescence over time with a viridis palette
ggplot(fluorescence_summary, aes(x = Time_hours, y = mean_fluorescence, color = Design)) +
geom_line(size = 1) +  # Line thickness set to 1
theme_minimal() +
labs(title = "Mean Fluorescence Over Time by Media + Cell Type", x = "Time (hours)", y = "Mean Fluorescence", color = "Media + Cell Type") +
scale_x_continuous(breaks = seq(0, max(fluorescence_summary$Time_hours, na.rm = TRUE), by = 1)) +  # X-axis in 1-hour increments
scale_color_viridis(discrete = TRUE) +  # Apply viridis color palette
theme(legend.position = "right")
ggplot(fluorescence_summary, aes(x = Time_hours, y = mean_fluorescence, color = Design)) +
geom_line(size = 1) +  # Adjust the size parameter to make lines thicker
theme_minimal() +
labs(title = "Mean Fluorescence Over Time by Media + Cell Type", x = "Time (hours)", y = "Mean Fluorescence", color = "Media + Cell Type") +
scale_x_continuous(breaks = seq(0, max(fluorescence_summary$Time_hours, na.rm = TRUE), by = 1)) +  # X-axis in 1-hour increments
theme(legend.position = "right")
# Load necessary libraries
library(tidyverse)
# File paths
fluorescence_file <- "C:/Users/parke/Indiana University/Lennon, Jay - 0000_Park/Data/Fluor Data R/20240915.Fluor.csv"
design_file <- "C:/Users/parke/Indiana University/Lennon, Jay - 0000_Park/Data/Fluor Data R/Design 3.csv"
# Read the fluorescence data
fluorescence_data <- read.csv(fluorescence_file)
# Read the design file
design_data <- read.csv(design_file, header = FALSE)
# Extract media and cell types from the design data
media_type <- design_data[1:8, ]
cell_type <- design_data[9:16, ]
# Flatten the design data into vectors
media_type_flat <- as.vector(t(media_type))
cell_type_flat <- as.vector(t(cell_type))
# Combine media and cell types into a single vector
combined_design <- paste(media_type_flat, cell_type_flat, sep = " + ")
# Prepare the fluorescence data for merging
fluorescence_long <- fluorescence_data %>%
pivot_longer(cols = -Time, names_to = "Well", values_to = "Fluorescence")
# Ensure that the 'Time' column is numeric
fluorescence_long <- fluorescence_long %>%
mutate(Time = as.numeric(Time))
# Map each well to its corresponding design (media + cell type)
fluorescence_long$Design <- combined_design[match(fluorescence_long$Well, names(fluorescence_data)[-1])]
# Filter out any rows where the Design contains "Blank" or "CTRL"
fluorescence_long_filtered <- fluorescence_long %>%
filter(!grepl("Blank|CTRL", Design, ignore.case = TRUE))
# Convert Time to hours (assuming Time was initially in minutes)
fluorescence_long_filtered <- fluorescence_long_filtered %>%
mutate(Time_hours = Time / 60)
# Create a condition variable to differentiate between CDSM and CDSM 1:10
fluorescence_long_filtered <- fluorescence_long_filtered %>%
mutate(Condition = case_when(
grepl("CDSM", Design) ~ "CDSM",
grepl("CDSM 1:10", Design) ~ "CDSM 1:10",
TRUE ~ NA_character_
))
# Group by Time and Condition, and calculate the mean fluorescence for each group
fluorescence_summary <- fluorescence_long_filtered %>%
group_by(Time_hours, Condition) %>%
summarize(mean_fluorescence = mean(Fluorescence, na.rm = TRUE), .groups = 'drop')
# Plot the mean fluorescence over time, faceted by Condition
ggplot(fluorescence_summary, aes(x = Time_hours, y = mean_fluorescence)) +
geom_line(size = 1) +  # Line thickness set to 1
theme_minimal() +
labs(title = "Mean Fluorescence Over Time", x = "Time (hours)", y = "Mean Fluorescence") +
facet_wrap(~ Condition, scales = "free_y") +  # Create separate plots for each Condition
scale_x_continuous(breaks = seq(0, max(fluorescence_summary$Time_hours, na.rm = TRUE), by = 1)) +  # X-axis in 1-hour increments
theme(legend.position = "right")
# Load necessary libraries
library(tidyverse)
# File paths
fluorescence_file <- "C:/Users/parke/Indiana University/Lennon, Jay - 0000_Park/Data/Fluor Data R/20240915.Fluor.csv"
design_file <- "C:/Users/parke/Indiana University/Lennon, Jay - 0000_Park/Data/Fluor Data R/Design 3.csv"
# Read the fluorescence data
fluorescence_data <- read.csv(fluorescence_file)
# Read the design file
design_data <- read.csv(design_file, header = FALSE)
# Extract media and cell types from the design data
media_type <- design_data[1:8, ]
cell_type <- design_data[9:16, ]
# Flatten the design data into vectors
media_type_flat <- as.vector(t(media_type))
cell_type_flat <- as.vector(t(cell_type))
# Combine media and cell types into a single vector
combined_design <- paste(media_type_flat, cell_type_flat, sep = " + ")
# Prepare the fluorescence data for merging
fluorescence_long <- fluorescence_data %>%
pivot_longer(cols = -Time, names_to = "Well", values_to = "Fluorescence")
# Ensure that the 'Time' column is numeric
fluorescence_long <- fluorescence_long %>%
mutate(Time = as.numeric(Time))
# Map each well to its corresponding design (media + cell type)
fluorescence_long$Design <- combined_design[match(fluorescence_long$Well, names(fluorescence_data)[-1])]
# Filter out any rows where the Design contains "Blank"
fluorescence_long_filtered <- fluorescence_long %>%
filter(!grepl("Blank", Design))
# Convert Time to hours (assuming Time was initially in minutes)
fluorescence_long_filtered <- fluorescence_long_filtered %>%
mutate(Time_hours = Time / 60)
# Plot all fluorescence over time in one plot, colored by Design
ggplot(fluorescence_long_filtered, aes(x = Time_hours, y = Fluorescence, color = Design, group = Well)) +
geom_line() +
theme_minimal() +
labs(title = "Fluorescence Over Time by Media + Cell Type", x = "Time (hours)", y = "Fluorescence", color = "Media + Cell Type") +
scale_x_continuous(breaks = seq(0, max(fluorescence_long_filtered$Time_hours, na.rm = TRUE), by = 1)) +  # X-axis in 1-hour increments
theme(legend.position = "right")
# Check if Time is numeric and the data is complete
fluorescence_comparison <- fluorescence_comparison %>%
filter(!is.na(Fluorescence) & !is.na(Time_hours))
# Check if Time is numeric and the data is complete
fluorescence_comparison <- fluorescence_comparison %>%
filter(!is.na(Fluorescence) & !is.na(Time_hours))
# Filter for CDSM 1:10 GFP and CDSM 1:10 Separate GFP
fluorescence_comparison <- fluorescence_long_filtered %>%
filter(Design %in% c("CDSM 1:10 GFP", "CDSM 1:10 Separate GFP"))
ggplot(fluorescence_comparison, aes(x = Time_hours, y = Fluorescence, color = Design, group = Well)) +
geom_line() +
theme_minimal() +
labs(title = "Fluorescence Over Time for CDSM 1:10 GFP vs. CDSM 1:10 Separate GFP",
x = "Time (hours)", y = "Fluorescence", color = "Design") +
scale_x_continuous(breaks = seq(0, max(fluorescence_comparison$Time_hours, na.rm = TRUE), by = 1)) +
theme(legend.position = "right")
# Check if Time is numeric and the data is complete
fluorescence_comparison <- fluorescence_comparison %>%
filter(!is.na(Fluorescence) & !is.na(Time_hours))
# Perform a t-test on the mean fluorescence values at each time point
t_test_results <- fluorescence_comparison %>%
group_by(Time_hours) %>%
summarize(
t_test = list(t.test(Fluorescence[Design == "CDSM 1:10 GFP"], Fluorescence[Design == "CDSM 1:10 Separate GFP"])),
.groups = 'drop'
)
# Perform a Wilcoxon rank-sum test on the fluorescence values
wilcoxon_results <- fluorescence_comparison %>%
group_by(Time_hours) %>%
summarize(
wilcoxon = list(wilcox.test(Fluorescence[Design == "CDSM 1:10 GFP"], Fluorescence[Design == "CDSM 1:10 Separate GFP"])),
.groups = 'drop'
)
# Check the count of observations for each design at each time point
data_check <- fluorescence_comparison %>%
group_by(Time_hours, Design) %>%
summarize(count = n(), .groups = 'drop')
print(data_check)
# Filter out time points with insufficient data
sufficient_data <- data_check %>%
filter(count >= 2)  # Adjust this threshold as needed
# Join with the main data to filter for these time points
fluorescence_comparison_filtered <- fluorescence_comparison %>%
semi_join(sufficient_data, by = c("Time_hours", "Design"))
# Perform a t-test on the mean fluorescence values at each time point
t_test_results <- fluorescence_comparison_filtered %>%
group_by(Time_hours) %>%
filter(Design %in% c("CDSM 1:10 GFP", "CDSM 1:10 Separate GFP")) %>%
summarize(
t_test = list(t.test(Fluorescence[Design == "CDSM 1:10 GFP"], Fluorescence[Design == "CDSM 1:10 Separate GFP"])),
.groups = 'drop'
)
# Filter for time points with sufficient data
sufficient_data <- data_check %>%
filter(Design %in% c("CDSM 1:10 GFP", "CDSM 1:10 Separate GFP")) %>%
group_by(Time_hours) %>%
filter(count >= 2)  # Adjust this threshold based on your needs
# Join with the main data to filter for these time points
fluorescence_comparison_filtered <- fluorescence_comparison %>%
semi_join(sufficient_data, by = c("Time_hours", "Design"))
# Perform a t-test on the fluorescence values
t_test_results <- fluorescence_comparison_filtered %>%
group_by(Time_hours) %>%
filter(Design %in% c("CDSM 1:10 GFP", "CDSM 1:10 Separate GFP")) %>%
summarize(
t_test = list(t.test(Fluorescence[Design == "CDSM 1:10 GFP"], Fluorescence[Design == "CDSM 1:10 Separate GFP"])),
.groups = 'drop'
)
# Filter to keep only time points with at least some observations for each Design
data_counts <- fluorescence_comparison %>%
group_by(Time_hours, Design) %>%
summarize(count = n(), .groups = 'drop')
# Keep only those time points with sufficient data (e.g., more than 1 observation per group)
valid_times <- data_counts %>%
filter(count > 1) %>%
pull(Time_hours) %>%
unique()
# Filter the original data
fluorescence_comparison_filtered <- fluorescence_comparison %>%
filter(Time_hours %in% valid_times)
# Perform t-test on the fluorescence values
t_test_results <- fluorescence_comparison_filtered %>%
group_by(Time_hours) %>%
filter(Design %in% c("CDSM 1:10 GFP", "CDSM 1:10 Separate GFP")) %>%
summarize(
t_test = ifelse(
sum(Design == "CDSM 1:10 GFP") > 1 & sum(Design == "CDSM 1:10 Separate GFP") > 1,
list(t.test(Fluorescence[Design == "CDSM 1:10 GFP"], Fluorescence[Design == "CDSM 1:10 Separate GFP"])),
NA
),
.groups = 'drop'
) %>%
mutate(p_value = ifelse(is.na(t_test), NA, sapply(t_test, function(x) x$p.value))) %>%
select(Time_hours, p_value)
print(t_test_results)
# Perform Wilcoxon rank-sum test on the fluorescence values
wilcoxon_results <- fluorescence_comparison_filtered %>%
group_by(Time_hours) %>%
filter(Design %in% c("CDSM 1:10 GFP", "CDSM 1:10 Separate GFP")) %>%
summarize(
wilcoxon = ifelse(
sum(Design == "CDSM 1:10 GFP") > 1 & sum(Design == "CDSM 1:10 Separate GFP") > 1,
list(wilcox.test(Fluorescence[Design == "CDSM 1:10 GFP"], Fluorescence[Design == "CDSM 1:10 Separate GFP"])),
NA
),
.groups = 'drop'
) %>%
mutate(p_value = ifelse(is.na(wilcoxon), NA, sapply(wilcoxon, function(x) x$p.value))) %>%
select(Time_hours, p_value)
print(wilcoxon_results)
print(t_test_results)
View(t_test_results)
# Check unique values in Design to confirm consistency
unique(fluorescence_comparison$Design)
# Check the number of observations for each time point and condition
fluorescence_comparison %>%
group_by(Time_hours, Design) %>%
summarize(count = n(), .groups = 'drop')
# Check for NA or infinite values
sum(is.na(fluorescence_comparison$Fluorescence))
sum(is.infinite(fluorescence_comparison$Fluorescence))
# Check the data for each time point and condition
check_data <- fluorescence_comparison %>%
filter(Design %in% c("CDSM 1:10 GFP", "CDSM 1:10 Separate GFP")) %>%
group_by(Time_hours, Design) %>%
summarize(count = n(), .groups = 'drop')
print(check_data)
# Example: Check data availability at a specific time point
example_time_point <- 1  # Replace with an actual time point
example_data <- fluorescence_comparison %>%
filter(Time_hours == example_time_point, Design %in% c("CDSM 1:10 GFP", "CDSM 1:10 Separate GFP"))
print(example_data)
View(example_data)
# Print unique values in Design to verify correctness
unique(fluorescence_comparison$Design)
# Filter out any rows where the Design contains "Blank" and "CTRL"
fluorescence_long_filtered <- fluorescence_long %>%
filter(!grepl("Blank|CTRL", Design, ignore.case = TRUE))
# Convert Time to hours (assuming Time was initially in minutes)
fluorescence_long_filtered <- fluorescence_long_filtered %>%
mutate(Time_hours = Time / 60)
# Group by Time and Design, and calculate the mean fluorescence for each group
fluorescence_summary <- fluorescence_long_filtered %>%
group_by(Time_hours, Design) %>%
summarize(mean_fluorescence = mean(Fluorescence, na.rm = TRUE))
# Perform a t-test
t_test_results <- fluorescence_comparison %>%
filter(Design %in% c("CDSM 1:10 + GFP", "CDSM 1:10 Separate + GFP")) %>%
group_by(Time_hours) %>%
summarize(
t_test = list(t.test(Fluorescence[Design == "CDSM 1:10 + GFP"], Fluorescence[Design == "CDSM 1:10 Separate + GFP"])),
.groups = 'drop'
) %>%
mutate(p_value = map_dbl(t_test, ~ .x$p.value))
# Load necessary libraries
library(tidyverse)
# File paths
fluorescence_file <- "C:/Users/parke/Indiana University/Lennon, Jay - 0000_Park/Data/Fluor Data R/20240915.Fluor.csv"
design_file <- "C:/Users/parke/Indiana University/Lennon, Jay - 0000_Park/Data/Fluor Data R/Design 3.csv"
# Read the fluorescence data
fluorescence_data <- read.csv(fluorescence_file)
# Read the design file
design_data <- read.csv(design_file, header = FALSE)
# Extract media and cell types from the design data
media_type <- design_data[1:8, ]
cell_type <- design_data[9:16, ]
# Flatten the design data into vectors
media_type_flat <- as.vector(t(media_type))
cell_type_flat <- as.vector(t(cell_type))
# Combine media and cell types into a single vector
combined_design <- paste(media_type_flat, cell_type_flat, sep = " + ")
# Prepare the fluorescence data for merging
fluorescence_long <- fluorescence_data %>%
pivot_longer(cols = -Time, names_to = "Well", values_to = "Fluorescence")
# Ensure that the 'Time' column is numeric
fluorescence_long <- fluorescence_long %>%
mutate(Time = as.numeric(Time))
# Map each well to its corresponding design (media + cell type)
fluorescence_long$Design <- combined_design[match(fluorescence_long$Well, names(fluorescence_data)[-1])]
# Filter out any rows where the Design contains "Blank"
fluorescence_long_filtered <- fluorescence_long %>%
filter(!grepl("Blank", Design))
#Or filter blank and ctrls
fluorescence_long_filtered <- fluorescence_long %>%
filter(!grepl("Blank|CTRL", Design, ignore.case = TRUE))
# Convert Time to hours (assuming Time was initially in minutes)
fluorescence_long_filtered <- fluorescence_long_filtered %>%
mutate(Time_hours = Time / 60)
# Group by Time and Design, and calculate the mean fluorescence for each group
fluorescence_summary <- fluorescence_long_filtered %>%
group_by(Time_hours, Design) %>%
summarize(mean_fluorescence = mean(Fluorescence, na.rm = TRUE))
# Plot the mean fluorescence over time, with thicker lines (size = 1.5)
ggplot(fluorescence_summary, aes(x = Time_hours, y = mean_fluorescence, color = Design)) +
geom_line(size = 1) +  # Adjust the size parameter to make lines thicker
theme_minimal() +
labs(title = "Mean Fluorescence Over Time by Media + Cell Type", x = "Time (hours)", y = "Mean Fluorescence", color = "Media + Cell Type") +
scale_x_continuous(breaks = seq(0, max(fluorescence_summary$Time_hours, na.rm = TRUE), by = 1)) +  # X-axis in 1-hour increments
theme(legend.position = "right")
setwd("C:/Users/parke/OneDrive - Indiana University/GitHub")
ls
rm(list = ls())
knitr::opts_knit$set(root.dir = "C:/Users/parke/OneDrive - Indiana University/GitHub/ASG-fitness-effects/microplate fitness assay")
getwd()
setwd("C:/Users/parke/OneDrive - Indiana University/GitHub/ASG-fitness-effects/microplate fitness assay")
getwd()
knitr::opts_knit$set(root.dir = "C:/Users/parke/OneDrive - Indiana University/GitHub/ASG-fitness-effects/microplate fitness assay/data")
getwd()
knitr::opts_knit$set(root.dir = "C:/Users/parke/OneDrive - Indiana University/GitHub/ASG-fitness-effects/microplate fitness assay/")
getwd()
setwd("C:/Users/parke/OneDrive - Indiana University/GitHub/ASG-fitness-effects/microplate fitness assay/")
getwd()
#load data
getwd()
knitr::opts_knit$set(root.dir = "C:/Users/parke/OneDrive - Indiana University/GitHub/ASG-fitness-effects/microplate fitness assay/")
#load data
getwd()
setwd("C:/Users/parke/OneDrive - Indiana University/GitHub/ASG-fitness-effects/microplate fitness assay/")
#load data
getwd()
getwd()
setwd("C:/Users/parke/OneDrive - Indiana University/GitHub/ASG-fitness-effects/microplate fitness assay/")
getwd()
setwd("C:/Users/parke/OneDrive - Indiana University/GitHub/ASG-fitness-effects/microplate fitness assay/")
getwd()
getwd()
getwd()
getwd()
rm(list = ls())
knitr::opts_knit$set(root.dir = "C:/Users/parke/OneDrive - Indiana University/GitHub/ASG-fitness-effects/microplate fitness assay/")
setwd("C:/Users/parke/OneDrive - Indiana University/GitHub/ASG-fitness-effects/microplate fitness assay/")
getwd()
#install.packages("tidyverse")
require("png")
require("dplyr")
library("tidyverse")
require("grid")
require("tibble")
require("knitr")
require("extrafont")
require("ggrepel");
require("gridExtra")
require("contrast")
sem <- function(x) sqrt(var(x)/length(x))
cv <- function(x) (sd(x)/mean(x))*100
#load data
data<-read.csv("~//20250211OD600.csv")
getwd()
setwd("C:/Users/parke/OneDrive - Indiana University/GitHub/ASG-fitness-effects/microplate fitness assay/")
#load data
data<-read.csv("~/data/20250211OD600.csv")
#load data
data<-read.csv("~./data/20250211OD600.csv")
#load data
data<-read.csv("./data/20250211OD600.csv")
getwd()
getwd()
setwd("C:/Users/parke/OneDrive - Indiana University/GitHub/ASG-fitness-effects/microplate fitness assay")
#load data
data<-read.csv("./data/20250211OD600.csv")
getwd()
